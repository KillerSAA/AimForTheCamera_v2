{System ini files created by KillerSA. Discord: _killer#6467}   

  
int pFileName, pMode, iFile, pLine, OpenFile, CloseFile, ReadLine, valuee, imageb, pStr, pStr_buff, pEqual
  
int DATATYPE, buffer, ReturnValueInt
float ReturnValueFloat

const _int = 2, _float = 4  

while break

:OpenIniFile  
0DD0: pFileName @FileName
0DD0: pMode @mode
0DD0: OpenFile @_ZN8CFileMgr8OpenFileEPKcS1_
0DD1: OpenFile OpenFile
            
set_register_value 0 pFileName
set_register_value 1 pMode
context_call_func OpenFile
get_register_value iFile 0
if iFile <> false
return 

:GetValueFromIni 
ReadLineIni()

if DATATYPE == _int
then
    0DD0: DATATYPE @int
    0DD0: ReturnValueInt @value
    0DD0: pStr @string
    0DD0: pStr_buff @string_buff
    0DD0: pEqual @equal
    0DD0: buffer @buffer

    0@ = 0x18D7B8 
    get_image_base imageb
    0@ += imageb


    set_register_value 0 buffer 
    set_register_value 1 pStr  
    set_register_value 2 pStr_buff 
    set_register_value 3 pEqual  
    context_call_func 0@

    set_register_value 0 buffer 
    set_register_value 1 DATATYPE  
    set_register_value 2 ReturnValueInt
    context_call_func 0@

    DATATYPE = 0 
    Memory.Read(ReturnValueInt, ReturnValueInt, 4, 0)
end
    
if DATATYPE == _float
then
    0DD0: DATATYPE @float
    0DD0: ReturnValueFloat @value
    0DD0: pStr @string
    0DD0: pStr_buff @string_buff
    0DD0: pEqual @equal
    0DD0: buffer @buffer
    
    0@ = 0x18D7B8
    get_image_base imageb
    0@ += imageb


    set_register_value 0 buffer 
    set_register_value 1 pStr  
    set_register_value 2 pStr_buff 
    set_register_value 3 pEqual  
    context_call_func 0@

    set_register_value 0 buffer 
    set_register_value 1 DATATYPE  
    set_register_value 2 ReturnValueFloat
    context_call_func 0@

    DATATYPE = 0 
    Memory.Read(ReturnValueFloat, ReturnValueFloat, 4, 0)     
end


return 
 
:ReadLineIni
0DD0: buffer @buffer
0DD0: ReadLine @_ZN8CFileMgr8ReadLineEjPci
0DD1: ReadLine ReadLine
set_register_value 0 iFile
set_register_value 1 buffer 
set_register_value 2 512 
context_call_func ReadLine 
Memory.Read(ReadLine, buffer, 1, 0)
if and
 ReadLine <> 0xA // Line Feed
 ReadLine <> 0x5B // [
 ReadLine <> 0x3B // ;
 ReadLine <> 0x23 // #
jf @ReadLineIni
return         

:CloseIni
0DD0: CloseFile @_ZN8CFileMgr9CloseFileEj
0DD1: CloseFile CloseFile
set_register_value 0 iFile
context_call_func CloseFile
return 


:int
hex
    "%*s%*s%d" 00
end

:float
hex
    "%*s%*s%f" 00 
end

:value
hex
    00 00 00 00
end

:_ZN8CFileMgr8OpenFileEPKcS1_
hex
    "_ZN8CFileMgr8OpenFileEPKcS1_" 00 
end

:_ZN8CFileMgr8ReadLineEjPci 
hex
    "_ZN8CFileMgr8ReadLineEjPci" 00
end

:_ZN8CFileMgr9CloseFileEj 
hex
    "_ZN8CFileMgr9CloseFileEj" 00
end

:mode
hex 
"rt" 00
end 

:buffer
hex
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
end

:string
hex
    "%s%s" 00
end

:equal
hex
    00 
end

:string_buff
hex
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
end

end

